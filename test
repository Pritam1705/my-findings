from flask import Flask, request, jsonify
import logging
import json
import sqlite3
import os

app = Flask(__name__)
app.debug = True

# Logging setup
logging.basicConfig(level=logging.INFO)

# File-based SQLite DB for storing logs
DB_FILE = 'webhook_logs.db'

# In-memory log list (used for GET)
recent_logs = []

# Initialize SQLite DB
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            payload TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

@app.route('/')
def index():
    return "‚úÖ Flask Webhook Service is running!"

# üöÄ Webhook POST endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        payload = request.get_json()
        logging.info("üöÄ Webhook Received")

        pretty_payload = json.dumps(payload, indent=4)
        logging.info("üìë Webhook Data: \n" + pretty_payload)

        # Save to in-memory list
        recent_logs.append(payload)

        # Save to SQLite DB
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute("INSERT INTO logs (payload) VALUES (?)", (json.dumps(payload),))
        conn.commit()
        conn.close()

        if payload and 'commits' in payload:
            logging.info(f"üî® Commits Found: {len(payload['commits'])}")
            for commit in payload['commits']:
                logging.info(f"üîñ Commit ID: {commit['id']}")
                logging.info(f"üìù Message: {commit['message']}")
                logging.info(f"üë§ Author: {commit['author']['name']}")
                logging.info(f"üîó URL: {commit['url']}")

        return "OK", 200
    except Exception as e:
        logging.error(f"‚ùå Error: {e}")
        return f"Error: {e}", 500

# üëÄ View logs via GET
@app.route('/logs', methods=['GET'])
def get_logs():
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute("SELECT id, payload FROM logs ORDER BY id DESC LIMIT 20")
        rows = c.fetchall()
        conn.close()

        logs = [{"id": row[0], "payload": json.loads(row[1])} for row in rows]
        return jsonify(logs), 200
    except Exception as e:
        return f"Error fetching logs: {e}", 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
